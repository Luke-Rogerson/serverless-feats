"""
This type stub file was generated by pyright.
"""

from typing import Dict, List
from datetime import datetime
from boto3.resources.collection import ResourceCollection
from boto3.resources import base

class ServiceResource(base.ServiceResource):
    tables: tables
    def Table(self, name: str = ...) -> Table:
        ...
    
    def batch_get_item(self, RequestItems: Dict, ReturnConsumedCapacity: str = ...) -> Dict:
        ...
    
    def batch_write_item(self, RequestItems: Dict, ReturnConsumedCapacity: str = ..., ReturnItemCollectionMetrics: str = ...) -> Dict:
        ...
    
    def create_table(self, AttributeDefinitions: List, TableName: str, KeySchema: List, LocalSecondaryIndexes: List = ..., GlobalSecondaryIndexes: List = ..., BillingMode: str = ..., ProvisionedThroughput: Dict = ..., StreamSpecification: Dict = ..., SSESpecification: Dict = ..., Tags: List = ...) -> Table:
        ...
    
    def get_available_subresources(self) -> List[str]:
        ...
    


class Table(base.ServiceResource):
    attribute_definitions: List
    table_name: str
    key_schema: List
    table_status: str
    creation_date_time: datetime
    provisioned_throughput: Dict
    table_size_bytes: int
    item_count: int
    table_arn: str
    table_id: str
    billing_mode_summary: Dict
    local_secondary_indexes: List
    global_secondary_indexes: List
    stream_specification: Dict
    latest_stream_label: str
    latest_stream_arn: str
    restore_summary: Dict
    sse_description: Dict
    name: str
    def batch_writer(self, overwrite_by_pkeys: List[str] = ...):
        ...
    
    def delete(self) -> Dict:
        ...
    
    def delete_item(self, Key: Dict, Expected: Dict = ..., ConditionalOperator: str = ..., ReturnValues: str = ..., ReturnConsumedCapacity: str = ..., ReturnItemCollectionMetrics: str = ..., ConditionExpression: str = ..., ExpressionAttributeNames: Dict = ..., ExpressionAttributeValues: Dict = ...) -> Dict:
        ...
    
    def get_available_subresources(self) -> List[str]:
        ...
    
    def get_item(self, Key: Dict, AttributesToGet: List = ..., ConsistentRead: bool = ..., ReturnConsumedCapacity: str = ..., ProjectionExpression: str = ..., ExpressionAttributeNames: Dict = ...) -> Dict:
        ...
    
    def load(self):
        ...
    
    def put_item(self, Item: Dict, Expected: Dict = ..., ReturnValues: str = ..., ReturnConsumedCapacity: str = ..., ReturnItemCollectionMetrics: str = ..., ConditionalOperator: str = ..., ConditionExpression: str = ..., ExpressionAttributeNames: Dict = ..., ExpressionAttributeValues: Dict = ...) -> Dict:
        ...
    
    def query(self, IndexName: str = ..., Select: str = ..., AttributesToGet: List = ..., Limit: int = ..., ConsistentRead: bool = ..., KeyConditions: Dict = ..., QueryFilter: Dict = ..., ConditionalOperator: str = ..., ScanIndexForward: bool = ..., ExclusiveStartKey: Dict = ..., ReturnConsumedCapacity: str = ..., ProjectionExpression: str = ..., FilterExpression: str = ..., KeyConditionExpression: str = ..., ExpressionAttributeNames: Dict = ..., ExpressionAttributeValues: Dict = ...) -> Dict:
        ...
    
    def reload(self):
        ...
    
    def scan(self, IndexName: str = ..., AttributesToGet: List = ..., Limit: int = ..., Select: str = ..., ScanFilter: Dict = ..., ConditionalOperator: str = ..., ExclusiveStartKey: Dict = ..., ReturnConsumedCapacity: str = ..., TotalSegments: int = ..., Segment: int = ..., ProjectionExpression: str = ..., FilterExpression: str = ..., ExpressionAttributeNames: Dict = ..., ExpressionAttributeValues: Dict = ..., ConsistentRead: bool = ...) -> Dict:
        ...
    
    def update(self, AttributeDefinitions: List = ..., BillingMode: str = ..., ProvisionedThroughput: Dict = ..., GlobalSecondaryIndexUpdates: List = ..., StreamSpecification: Dict = ..., SSESpecification: Dict = ...) -> Table:
        ...
    
    def update_item(self, Key: Dict, AttributeUpdates: Dict = ..., Expected: Dict = ..., ConditionalOperator: str = ..., ReturnValues: str = ..., ReturnConsumedCapacity: str = ..., ReturnItemCollectionMetrics: str = ..., UpdateExpression: str = ..., ConditionExpression: str = ..., ExpressionAttributeNames: Dict = ..., ExpressionAttributeValues: Dict = ...) -> Dict:
        ...
    
    def wait_until_exists(self):
        ...
    
    def wait_until_not_exists(self):
        ...
    


class tables(ResourceCollection):
    @classmethod
    def all(cls) -> List[Table]:
        ...
    
    @classmethod
    def filter(cls, ExclusiveStartTableName: str = ..., Limit: int = ...) -> List[Table]:
        ...
    
    @classmethod
    def iterator(cls) -> ResourceCollection:
        ...
    
    @classmethod
    def limit(cls, count: int = ...) -> List[Table]:
        ...
    
    @classmethod
    def page_size(cls, count: int = ...) -> List[Table]:
        ...
    
    @classmethod
    def pages(cls) -> List[base.ServiceResource]:
        ...
    


